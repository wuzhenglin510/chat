// source: ChatPack.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var data_Message_pb = require('./data/Message_pb.js');
goog.object.extend(proto, data_Message_pb);
var data_Subscribe_pb = require('./data/Subscribe_pb.js');
goog.object.extend(proto, data_Subscribe_pb);
var data_UnSubscribe_pb = require('./data/UnSubscribe_pb.js');
goog.object.extend(proto, data_UnSubscribe_pb);
var data_Result_pb = require('./data/Result_pb.js');
goog.object.extend(proto, data_Result_pb);
goog.exportSymbol('proto.ChatPack', null, global);
goog.exportSymbol('proto.ChatPack.DataCase', null, global);
goog.exportSymbol('proto.ChatPack.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatPack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ChatPack.oneofGroups_);
};
goog.inherits(proto.ChatPack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatPack.displayName = 'proto.ChatPack';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ChatPack.oneofGroups_ = [[3,4,5,6]];

/**
 * @enum {number}
 */
proto.ChatPack.DataCase = {
  DATA_NOT_SET: 0,
  SUBSCRIBE: 3,
  UNSUBSCRIBE: 4,
  MESSAGE: 5,
  RESULT: 6
};

/**
 * @return {proto.ChatPack.DataCase}
 */
proto.ChatPack.prototype.getDataCase = function() {
  return /** @type {proto.ChatPack.DataCase} */(jspb.Message.computeOneofCase(this, proto.ChatPack.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatPack.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatPack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatPack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatPack.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    subscribe: (f = msg.getSubscribe()) && data_Subscribe_pb.Subscribe.toObject(includeInstance, f),
    unsubscribe: (f = msg.getUnsubscribe()) && data_UnSubscribe_pb.UnSubscribe.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && data_Message_pb.Message.toObject(includeInstance, f),
    result: (f = msg.getResult()) && data_Result_pb.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatPack}
 */
proto.ChatPack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatPack;
  return proto.ChatPack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatPack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatPack}
 */
proto.ChatPack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ChatPack.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new data_Subscribe_pb.Subscribe;
      reader.readMessage(value,data_Subscribe_pb.Subscribe.deserializeBinaryFromReader);
      msg.setSubscribe(value);
      break;
    case 4:
      var value = new data_UnSubscribe_pb.UnSubscribe;
      reader.readMessage(value,data_UnSubscribe_pb.UnSubscribe.deserializeBinaryFromReader);
      msg.setUnsubscribe(value);
      break;
    case 5:
      var value = new data_Message_pb.Message;
      reader.readMessage(value,data_Message_pb.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 6:
      var value = new data_Result_pb.Result;
      reader.readMessage(value,data_Result_pb.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatPack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatPack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatPack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatPack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSubscribe();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      data_Subscribe_pb.Subscribe.serializeBinaryToWriter
    );
  }
  f = message.getUnsubscribe();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      data_UnSubscribe_pb.UnSubscribe.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      data_Message_pb.Message.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      data_Result_pb.Result.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.ChatPack.Type = {
  PING: 0,
  PONG: 1,
  SUBSCRIBE: 2,
  UNSUBSCRIBE: 3,
  MESSAGE: 4,
  RESULT: 5
};

/**
 * optional Type type = 1;
 * @return {!proto.ChatPack.Type}
 */
proto.ChatPack.prototype.getType = function() {
  return /** @type {!proto.ChatPack.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ChatPack.Type} value
 * @return {!proto.ChatPack} returns this
 */
proto.ChatPack.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional data.Subscribe subscribe = 3;
 * @return {?proto.data.Subscribe}
 */
proto.ChatPack.prototype.getSubscribe = function() {
  return /** @type{?proto.data.Subscribe} */ (
    jspb.Message.getWrapperField(this, data_Subscribe_pb.Subscribe, 3));
};


/**
 * @param {?proto.data.Subscribe|undefined} value
 * @return {!proto.ChatPack} returns this
*/
proto.ChatPack.prototype.setSubscribe = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ChatPack.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatPack} returns this
 */
proto.ChatPack.prototype.clearSubscribe = function() {
  return this.setSubscribe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatPack.prototype.hasSubscribe = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional data.UnSubscribe unsubscribe = 4;
 * @return {?proto.data.UnSubscribe}
 */
proto.ChatPack.prototype.getUnsubscribe = function() {
  return /** @type{?proto.data.UnSubscribe} */ (
    jspb.Message.getWrapperField(this, data_UnSubscribe_pb.UnSubscribe, 4));
};


/**
 * @param {?proto.data.UnSubscribe|undefined} value
 * @return {!proto.ChatPack} returns this
*/
proto.ChatPack.prototype.setUnsubscribe = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ChatPack.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatPack} returns this
 */
proto.ChatPack.prototype.clearUnsubscribe = function() {
  return this.setUnsubscribe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatPack.prototype.hasUnsubscribe = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional data.Message message = 5;
 * @return {?proto.data.Message}
 */
proto.ChatPack.prototype.getMessage = function() {
  return /** @type{?proto.data.Message} */ (
    jspb.Message.getWrapperField(this, data_Message_pb.Message, 5));
};


/**
 * @param {?proto.data.Message|undefined} value
 * @return {!proto.ChatPack} returns this
*/
proto.ChatPack.prototype.setMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.ChatPack.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatPack} returns this
 */
proto.ChatPack.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatPack.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional data.Result result = 6;
 * @return {?proto.data.Result}
 */
proto.ChatPack.prototype.getResult = function() {
  return /** @type{?proto.data.Result} */ (
    jspb.Message.getWrapperField(this, data_Result_pb.Result, 6));
};


/**
 * @param {?proto.data.Result|undefined} value
 * @return {!proto.ChatPack} returns this
*/
proto.ChatPack.prototype.setResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.ChatPack.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatPack} returns this
 */
proto.ChatPack.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatPack.prototype.hasResult = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto);
